package com.ni.sifac.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.ni.sifac.dao.Configuration;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CONFIGURATION".
*/
public class ConfigurationDao extends AbstractDao<Configuration, Long> {

    public static final String TABLENAME = "CONFIGURATION";

    /**
     * Properties of entity Configuration.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property HasAccess = new Property(1, Boolean.class, "HasAccess", false, "HAS_ACCESS");
        public final static Property SsgCuentaID = new Property(2, String.class, "SsgCuentaID", false, "SSG_CUENTA_ID");
        public final static Property Login = new Property(3, String.class, "Login", false, "LOGIN");
        public final static Property Clave = new Property(4, String.class, "Clave", false, "CLAVE");
        public final static Property ObjEmpleadoID = new Property(5, Integer.class, "objEmpleadoID", false, "OBJ_EMPLEADO_ID");
    };


    public ConfigurationDao(DaoConfig config) {
        super(config);
    }
    
    public ConfigurationDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CONFIGURATION\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"HAS_ACCESS\" INTEGER," + // 1: HasAccess
                "\"SSG_CUENTA_ID\" TEXT," + // 2: SsgCuentaID
                "\"LOGIN\" TEXT," + // 3: Login
                "\"CLAVE\" TEXT," + // 4: Clave
                "\"OBJ_EMPLEADO_ID\" INTEGER);"); // 5: objEmpleadoID
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CONFIGURATION\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Configuration entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Boolean HasAccess = entity.getHasAccess();
        if (HasAccess != null) {
            stmt.bindLong(2, HasAccess ? 1L: 0L);
        }
 
        String SsgCuentaID = entity.getSsgCuentaID();
        if (SsgCuentaID != null) {
            stmt.bindString(3, SsgCuentaID);
        }
 
        String Login = entity.getLogin();
        if (Login != null) {
            stmt.bindString(4, Login);
        }
 
        String Clave = entity.getClave();
        if (Clave != null) {
            stmt.bindString(5, Clave);
        }
 
        Integer objEmpleadoID = entity.getObjEmpleadoID();
        if (objEmpleadoID != null) {
            stmt.bindLong(6, objEmpleadoID);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Configuration readEntity(Cursor cursor, int offset) {
        Configuration entity = new Configuration( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getShort(offset + 1) != 0, // HasAccess
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // SsgCuentaID
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // Login
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // Clave
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5) // objEmpleadoID
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Configuration entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setHasAccess(cursor.isNull(offset + 1) ? null : cursor.getShort(offset + 1) != 0);
        entity.setSsgCuentaID(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setLogin(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setClave(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setObjEmpleadoID(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Configuration entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Configuration entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
