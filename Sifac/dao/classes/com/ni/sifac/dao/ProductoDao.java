package com.ni.sifac.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.ni.sifac.dao.Producto;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PRODUCTO".
*/
public class ProductoDao extends AbstractDao<Producto, Long> {

    public static final String TABLENAME = "PRODUCTO";

    /**
     * Properties of entity Producto.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Cantidad_Minima = new Property(1, Integer.class, "Cantidad_Minima", false, "CANTIDAD__MINIMA");
        public final static Property CostoPromedio = new Property(2, Float.class, "CostoPromedio", false, "COSTO_PROMEDIO");
        public final static Property Descripcion = new Property(3, String.class, "Descripcion", false, "DESCRIPCION");
        public final static Property Margen_Utilidad_Contado = new Property(4, Float.class, "Margen_Utilidad_Contado", false, "MARGEN__UTILIDAD__CONTADO");
        public final static Property Margen_Utilidad_Credito = new Property(5, Float.class, "Margen_Utilidad_Credito", false, "MARGEN__UTILIDAD__CREDITO");
        public final static Property Nombre = new Property(6, String.class, "Nombre", false, "NOMBRE");
        public final static Property Precio_Contado = new Property(7, Float.class, "Precio_Contado", false, "PRECIO__CONTADO");
        public final static Property Precio_Credito = new Property(8, Float.class, "Precio_Credito", false, "PRECIO__CREDITO");
        public final static Property SivProductoID = new Property(9, Integer.class, "SivProductoID", false, "SIV_PRODUCTO_ID");
        public final static Property ObjCategoriaID = new Property(10, Integer.class, "objCategoriaID", false, "OBJ_CATEGORIA_ID");
        public final static Property ObjMarcaID = new Property(11, Integer.class, "objMarcaID", false, "OBJ_MARCA_ID");
    };


    public ProductoDao(DaoConfig config) {
        super(config);
    }
    
    public ProductoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PRODUCTO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"CANTIDAD__MINIMA\" INTEGER," + // 1: Cantidad_Minima
                "\"COSTO_PROMEDIO\" REAL," + // 2: CostoPromedio
                "\"DESCRIPCION\" TEXT," + // 3: Descripcion
                "\"MARGEN__UTILIDAD__CONTADO\" REAL," + // 4: Margen_Utilidad_Contado
                "\"MARGEN__UTILIDAD__CREDITO\" REAL," + // 5: Margen_Utilidad_Credito
                "\"NOMBRE\" TEXT," + // 6: Nombre
                "\"PRECIO__CONTADO\" REAL," + // 7: Precio_Contado
                "\"PRECIO__CREDITO\" REAL," + // 8: Precio_Credito
                "\"SIV_PRODUCTO_ID\" INTEGER," + // 9: SivProductoID
                "\"OBJ_CATEGORIA_ID\" INTEGER," + // 10: objCategoriaID
                "\"OBJ_MARCA_ID\" INTEGER);"); // 11: objMarcaID
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PRODUCTO\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Producto entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer Cantidad_Minima = entity.getCantidad_Minima();
        if (Cantidad_Minima != null) {
            stmt.bindLong(2, Cantidad_Minima);
        }
 
        Float CostoPromedio = entity.getCostoPromedio();
        if (CostoPromedio != null) {
            stmt.bindDouble(3, CostoPromedio);
        }
 
        String Descripcion = entity.getDescripcion();
        if (Descripcion != null) {
            stmt.bindString(4, Descripcion);
        }
 
        Float Margen_Utilidad_Contado = entity.getMargen_Utilidad_Contado();
        if (Margen_Utilidad_Contado != null) {
            stmt.bindDouble(5, Margen_Utilidad_Contado);
        }
 
        Float Margen_Utilidad_Credito = entity.getMargen_Utilidad_Credito();
        if (Margen_Utilidad_Credito != null) {
            stmt.bindDouble(6, Margen_Utilidad_Credito);
        }
 
        String Nombre = entity.getNombre();
        if (Nombre != null) {
            stmt.bindString(7, Nombre);
        }
 
        Float Precio_Contado = entity.getPrecio_Contado();
        if (Precio_Contado != null) {
            stmt.bindDouble(8, Precio_Contado);
        }
 
        Float Precio_Credito = entity.getPrecio_Credito();
        if (Precio_Credito != null) {
            stmt.bindDouble(9, Precio_Credito);
        }
 
        Integer SivProductoID = entity.getSivProductoID();
        if (SivProductoID != null) {
            stmt.bindLong(10, SivProductoID);
        }
 
        Integer objCategoriaID = entity.getObjCategoriaID();
        if (objCategoriaID != null) {
            stmt.bindLong(11, objCategoriaID);
        }
 
        Integer objMarcaID = entity.getObjMarcaID();
        if (objMarcaID != null) {
            stmt.bindLong(12, objMarcaID);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Producto readEntity(Cursor cursor, int offset) {
        Producto entity = new Producto( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // Cantidad_Minima
            cursor.isNull(offset + 2) ? null : cursor.getFloat(offset + 2), // CostoPromedio
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // Descripcion
            cursor.isNull(offset + 4) ? null : cursor.getFloat(offset + 4), // Margen_Utilidad_Contado
            cursor.isNull(offset + 5) ? null : cursor.getFloat(offset + 5), // Margen_Utilidad_Credito
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // Nombre
            cursor.isNull(offset + 7) ? null : cursor.getFloat(offset + 7), // Precio_Contado
            cursor.isNull(offset + 8) ? null : cursor.getFloat(offset + 8), // Precio_Credito
            cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9), // SivProductoID
            cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10), // objCategoriaID
            cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11) // objMarcaID
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Producto entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCantidad_Minima(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setCostoPromedio(cursor.isNull(offset + 2) ? null : cursor.getFloat(offset + 2));
        entity.setDescripcion(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setMargen_Utilidad_Contado(cursor.isNull(offset + 4) ? null : cursor.getFloat(offset + 4));
        entity.setMargen_Utilidad_Credito(cursor.isNull(offset + 5) ? null : cursor.getFloat(offset + 5));
        entity.setNombre(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setPrecio_Contado(cursor.isNull(offset + 7) ? null : cursor.getFloat(offset + 7));
        entity.setPrecio_Credito(cursor.isNull(offset + 8) ? null : cursor.getFloat(offset + 8));
        entity.setSivProductoID(cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9));
        entity.setObjCategoriaID(cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10));
        entity.setObjMarcaID(cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Producto entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Producto entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
