package com.ni.sifac.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.ni.sifac.dao.Customer;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CUSTOMER".
*/
public class CustomerDao extends AbstractDao<Customer, Long> {

    public static final String TABLENAME = "CUSTOMER";

    /**
     * Properties of entity Customer.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Apellido2 = new Property(1, String.class, "Apellido2", false, "APELLIDO2");
        public final static Property Apellido1 = new Property(2, String.class, "Apellido1", false, "APELLIDO1");
        public final static Property Cedula = new Property(3, String.class, "Cedula", false, "CEDULA");
        public final static Property Ciudad = new Property(4, String.class, "Ciudad", false, "CIUDAD");
        public final static Property ClienteID = new Property(5, Integer.class, "ClienteID", false, "CLIENTE_ID");
        public final static Property Direccion = new Property(6, String.class, "Direccion", false, "DIRECCION");
        public final static Property FechaNacimiento = new Property(7, java.util.Date.class, "FechaNacimiento", false, "FECHA_NACIMIENTO");
        public final static Property Genero = new Property(8, String.class, "Genero", false, "GENERO");
        public final static Property Nombre1 = new Property(9, String.class, "Nombre1", false, "NOMBRE1");
        public final static Property Nombre2 = new Property(10, String.class, "Nombre2", false, "NOMBRE2");
        public final static Property OrdenCobro = new Property(11, Integer.class, "OrdenCobro", false, "ORDEN_COBRO");
        public final static Property Pais = new Property(12, String.class, "Pais", false, "PAIS");
        public final static Property RutaAsignada = new Property(13, String.class, "RutaAsignada", false, "RUTA_ASIGNADA");
        public final static Property StbRutaID = new Property(14, Integer.class, "StbRutaID", false, "STB_RUTA_ID");
        public final static Property Telefonos = new Property(15, String.class, "Telefonos", false, "TELEFONOS");
        public final static Property ObjCiudadID = new Property(16, Integer.class, "objCiudadID", false, "OBJ_CIUDAD_ID");
        public final static Property ObjGeneroID = new Property(17, Integer.class, "objGeneroID", false, "OBJ_GENERO_ID");
        public final static Property ObjPaisID = new Property(18, Integer.class, "objPaisID", false, "OBJ_PAIS_ID");
        public final static Property OjbCobradorID = new Property(19, Integer.class, "ojbCobradorID", false, "OJB_COBRADOR_ID");
    };


    public CustomerDao(DaoConfig config) {
        super(config);
    }
    
    public CustomerDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CUSTOMER\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"APELLIDO2\" TEXT," + // 1: Apellido2
                "\"APELLIDO1\" TEXT," + // 2: Apellido1
                "\"CEDULA\" TEXT," + // 3: Cedula
                "\"CIUDAD\" TEXT," + // 4: Ciudad
                "\"CLIENTE_ID\" INTEGER," + // 5: ClienteID
                "\"DIRECCION\" TEXT," + // 6: Direccion
                "\"FECHA_NACIMIENTO\" INTEGER," + // 7: FechaNacimiento
                "\"GENERO\" TEXT," + // 8: Genero
                "\"NOMBRE1\" TEXT," + // 9: Nombre1
                "\"NOMBRE2\" TEXT," + // 10: Nombre2
                "\"ORDEN_COBRO\" INTEGER," + // 11: OrdenCobro
                "\"PAIS\" TEXT," + // 12: Pais
                "\"RUTA_ASIGNADA\" TEXT," + // 13: RutaAsignada
                "\"STB_RUTA_ID\" INTEGER," + // 14: StbRutaID
                "\"TELEFONOS\" TEXT," + // 15: Telefonos
                "\"OBJ_CIUDAD_ID\" INTEGER," + // 16: objCiudadID
                "\"OBJ_GENERO_ID\" INTEGER," + // 17: objGeneroID
                "\"OBJ_PAIS_ID\" INTEGER," + // 18: objPaisID
                "\"OJB_COBRADOR_ID\" INTEGER);"); // 19: ojbCobradorID
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CUSTOMER\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Customer entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String Apellido2 = entity.getApellido2();
        if (Apellido2 != null) {
            stmt.bindString(2, Apellido2);
        }
 
        String Apellido1 = entity.getApellido1();
        if (Apellido1 != null) {
            stmt.bindString(3, Apellido1);
        }
 
        String Cedula = entity.getCedula();
        if (Cedula != null) {
            stmt.bindString(4, Cedula);
        }
 
        String Ciudad = entity.getCiudad();
        if (Ciudad != null) {
            stmt.bindString(5, Ciudad);
        }
 
        Integer ClienteID = entity.getClienteID();
        if (ClienteID != null) {
            stmt.bindLong(6, ClienteID);
        }
 
        String Direccion = entity.getDireccion();
        if (Direccion != null) {
            stmt.bindString(7, Direccion);
        }
 
        java.util.Date FechaNacimiento = entity.getFechaNacimiento();
        if (FechaNacimiento != null) {
            stmt.bindLong(8, FechaNacimiento.getTime());
        }
 
        String Genero = entity.getGenero();
        if (Genero != null) {
            stmt.bindString(9, Genero);
        }
 
        String Nombre1 = entity.getNombre1();
        if (Nombre1 != null) {
            stmt.bindString(10, Nombre1);
        }
 
        String Nombre2 = entity.getNombre2();
        if (Nombre2 != null) {
            stmt.bindString(11, Nombre2);
        }
 
        Integer OrdenCobro = entity.getOrdenCobro();
        if (OrdenCobro != null) {
            stmt.bindLong(12, OrdenCobro);
        }
 
        String Pais = entity.getPais();
        if (Pais != null) {
            stmt.bindString(13, Pais);
        }
 
        String RutaAsignada = entity.getRutaAsignada();
        if (RutaAsignada != null) {
            stmt.bindString(14, RutaAsignada);
        }
 
        Integer StbRutaID = entity.getStbRutaID();
        if (StbRutaID != null) {
            stmt.bindLong(15, StbRutaID);
        }
 
        String Telefonos = entity.getTelefonos();
        if (Telefonos != null) {
            stmt.bindString(16, Telefonos);
        }
 
        Integer objCiudadID = entity.getObjCiudadID();
        if (objCiudadID != null) {
            stmt.bindLong(17, objCiudadID);
        }
 
        Integer objGeneroID = entity.getObjGeneroID();
        if (objGeneroID != null) {
            stmt.bindLong(18, objGeneroID);
        }
 
        Integer objPaisID = entity.getObjPaisID();
        if (objPaisID != null) {
            stmt.bindLong(19, objPaisID);
        }
 
        Integer ojbCobradorID = entity.getOjbCobradorID();
        if (ojbCobradorID != null) {
            stmt.bindLong(20, ojbCobradorID);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Customer readEntity(Cursor cursor, int offset) {
        Customer entity = new Customer( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // Apellido2
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // Apellido1
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // Cedula
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // Ciudad
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // ClienteID
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // Direccion
            cursor.isNull(offset + 7) ? null : new java.util.Date(cursor.getLong(offset + 7)), // FechaNacimiento
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // Genero
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // Nombre1
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // Nombre2
            cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11), // OrdenCobro
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // Pais
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // RutaAsignada
            cursor.isNull(offset + 14) ? null : cursor.getInt(offset + 14), // StbRutaID
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // Telefonos
            cursor.isNull(offset + 16) ? null : cursor.getInt(offset + 16), // objCiudadID
            cursor.isNull(offset + 17) ? null : cursor.getInt(offset + 17), // objGeneroID
            cursor.isNull(offset + 18) ? null : cursor.getInt(offset + 18), // objPaisID
            cursor.isNull(offset + 19) ? null : cursor.getInt(offset + 19) // ojbCobradorID
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Customer entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setApellido2(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setApellido1(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCedula(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCiudad(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setClienteID(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setDireccion(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setFechaNacimiento(cursor.isNull(offset + 7) ? null : new java.util.Date(cursor.getLong(offset + 7)));
        entity.setGenero(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setNombre1(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setNombre2(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setOrdenCobro(cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11));
        entity.setPais(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setRutaAsignada(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setStbRutaID(cursor.isNull(offset + 14) ? null : cursor.getInt(offset + 14));
        entity.setTelefonos(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setObjCiudadID(cursor.isNull(offset + 16) ? null : cursor.getInt(offset + 16));
        entity.setObjGeneroID(cursor.isNull(offset + 17) ? null : cursor.getInt(offset + 17));
        entity.setObjPaisID(cursor.isNull(offset + 18) ? null : cursor.getInt(offset + 18));
        entity.setOjbCobradorID(cursor.isNull(offset + 19) ? null : cursor.getInt(offset + 19));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Customer entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Customer entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
