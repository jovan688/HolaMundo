package com.ni.sifac.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.ni.sifac.dao.Categoria;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CATEGORIA".
*/
public class CategoriaDao extends AbstractDao<Categoria, Void> {

    public static final String TABLENAME = "CATEGORIA";

    /**
     * Properties of entity Categoria.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property CategoriaID = new Property(0, Integer.class, "CategoriaID", false, "CATEGORIA_ID");
        public final static Property Descripcion = new Property(1, String.class, "Descripcion", false, "DESCRIPCION");
        public final static Property Nombre = new Property(2, String.class, "Nombre", false, "NOMBRE");
    };


    public CategoriaDao(DaoConfig config) {
        super(config);
    }
    
    public CategoriaDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CATEGORIA\" (" + //
                "\"CATEGORIA_ID\" INTEGER," + // 0: CategoriaID
                "\"DESCRIPCION\" TEXT," + // 1: Descripcion
                "\"NOMBRE\" TEXT);"); // 2: Nombre
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CATEGORIA\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Categoria entity) {
        stmt.clearBindings();
 
        Integer CategoriaID = entity.getCategoriaID();
        if (CategoriaID != null) {
            stmt.bindLong(1, CategoriaID);
        }
 
        String Descripcion = entity.getDescripcion();
        if (Descripcion != null) {
            stmt.bindString(2, Descripcion);
        }
 
        String Nombre = entity.getNombre();
        if (Nombre != null) {
            stmt.bindString(3, Nombre);
        }
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public Categoria readEntity(Cursor cursor, int offset) {
        Categoria entity = new Categoria( //
            cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0), // CategoriaID
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // Descripcion
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2) // Nombre
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Categoria entity, int offset) {
        entity.setCategoriaID(cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0));
        entity.setDescripcion(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setNombre(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(Categoria entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(Categoria entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
