package com.ni.sifac.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.ni.sifac.dao.Catalog;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CATALOG".
*/
public class CatalogDao extends AbstractDao<Catalog, Long> {

    public static final String TABLENAME = "CATALOG";

    /**
     * Properties of entity Catalog.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Activo = new Property(1, Boolean.class, "Activo", false, "ACTIVO");
        public final static Property CatalogoActivo = new Property(2, Boolean.class, "CatalogoActivo", false, "CATALOGO_ACTIVO");
        public final static Property CatalogoDescripcion = new Property(3, String.class, "CatalogoDescripcion", false, "CATALOGO_DESCRIPCION");
        public final static Property Codigo = new Property(4, String.class, "Codigo", false, "CODIGO");
        public final static Property Descripcion = new Property(5, String.class, "Descripcion", false, "DESCRIPCION");
        public final static Property Nombre = new Property(6, String.class, "Nombre", false, "NOMBRE");
        public final static Property StbValorCatalogoID = new Property(7, Integer.class, "StbValorCatalogoID", false, "STB_VALOR_CATALOGO_ID");
    };


    public CatalogDao(DaoConfig config) {
        super(config);
    }
    
    public CatalogDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CATALOG\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"ACTIVO\" INTEGER," + // 1: Activo
                "\"CATALOGO_ACTIVO\" INTEGER," + // 2: CatalogoActivo
                "\"CATALOGO_DESCRIPCION\" TEXT," + // 3: CatalogoDescripcion
                "\"CODIGO\" TEXT," + // 4: Codigo
                "\"DESCRIPCION\" TEXT," + // 5: Descripcion
                "\"NOMBRE\" TEXT," + // 6: Nombre
                "\"STB_VALOR_CATALOGO_ID\" INTEGER);"); // 7: StbValorCatalogoID
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CATALOG\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Catalog entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Boolean Activo = entity.getActivo();
        if (Activo != null) {
            stmt.bindLong(2, Activo ? 1L: 0L);
        }
 
        Boolean CatalogoActivo = entity.getCatalogoActivo();
        if (CatalogoActivo != null) {
            stmt.bindLong(3, CatalogoActivo ? 1L: 0L);
        }
 
        String CatalogoDescripcion = entity.getCatalogoDescripcion();
        if (CatalogoDescripcion != null) {
            stmt.bindString(4, CatalogoDescripcion);
        }
 
        String Codigo = entity.getCodigo();
        if (Codigo != null) {
            stmt.bindString(5, Codigo);
        }
 
        String Descripcion = entity.getDescripcion();
        if (Descripcion != null) {
            stmt.bindString(6, Descripcion);
        }
 
        String Nombre = entity.getNombre();
        if (Nombre != null) {
            stmt.bindString(7, Nombre);
        }
 
        Integer StbValorCatalogoID = entity.getStbValorCatalogoID();
        if (StbValorCatalogoID != null) {
            stmt.bindLong(8, StbValorCatalogoID);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Catalog readEntity(Cursor cursor, int offset) {
        Catalog entity = new Catalog( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getShort(offset + 1) != 0, // Activo
            cursor.isNull(offset + 2) ? null : cursor.getShort(offset + 2) != 0, // CatalogoActivo
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // CatalogoDescripcion
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // Codigo
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // Descripcion
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // Nombre
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7) // StbValorCatalogoID
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Catalog entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setActivo(cursor.isNull(offset + 1) ? null : cursor.getShort(offset + 1) != 0);
        entity.setCatalogoActivo(cursor.isNull(offset + 2) ? null : cursor.getShort(offset + 2) != 0);
        entity.setCatalogoDescripcion(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCodigo(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setDescripcion(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setNombre(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setStbValorCatalogoID(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Catalog entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Catalog entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
