package com.ni.sifac.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.ni.sifac.dao.Ciudad;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CIUDAD".
*/
public class CiudadDao extends AbstractDao<Ciudad, Void> {

    public static final String TABLENAME = "CIUDAD";

    /**
     * Properties of entity Ciudad.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Nombre = new Property(0, String.class, "Nombre", false, "NOMBRE");
        public final static Property StbCiudadID = new Property(1, Integer.class, "StbCiudadID", false, "STB_CIUDAD_ID");
        public final static Property ObjPaisID = new Property(2, Integer.class, "objPaisID", false, "OBJ_PAIS_ID");
    };


    public CiudadDao(DaoConfig config) {
        super(config);
    }
    
    public CiudadDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CIUDAD\" (" + //
                "\"NOMBRE\" TEXT," + // 0: Nombre
                "\"STB_CIUDAD_ID\" INTEGER," + // 1: StbCiudadID
                "\"OBJ_PAIS_ID\" INTEGER);"); // 2: objPaisID
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CIUDAD\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Ciudad entity) {
        stmt.clearBindings();
 
        String Nombre = entity.getNombre();
        if (Nombre != null) {
            stmt.bindString(1, Nombre);
        }
 
        Integer StbCiudadID = entity.getStbCiudadID();
        if (StbCiudadID != null) {
            stmt.bindLong(2, StbCiudadID);
        }
 
        Integer objPaisID = entity.getObjPaisID();
        if (objPaisID != null) {
            stmt.bindLong(3, objPaisID);
        }
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public Ciudad readEntity(Cursor cursor, int offset) {
        Ciudad entity = new Ciudad( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // Nombre
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // StbCiudadID
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2) // objPaisID
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Ciudad entity, int offset) {
        entity.setNombre(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setStbCiudadID(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setObjPaisID(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(Ciudad entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(Ciudad entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
