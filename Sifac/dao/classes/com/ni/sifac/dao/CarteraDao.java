package com.ni.sifac.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.ni.sifac.dao.Cartera;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CARTERA".
*/
public class CarteraDao extends AbstractDao<Cartera, Long> {

    public static final String TABLENAME = "CARTERA";

    /**
     * Properties of entity Cartera.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Cedula = new Property(1, String.class, "Cedula", false, "CEDULA");
        public final static Property Ciudad = new Property(2, String.class, "Ciudad", false, "CIUDAD");
        public final static Property ClienteID = new Property(3, Integer.class, "ClienteID", false, "CLIENTE_ID");
        public final static Property Direccion = new Property(4, String.class, "Direccion", false, "DIRECCION");
        public final static Property FechaAbono = new Property(5, String.class, "FechaAbono", false, "FECHA_ABONO");
        public final static Property MontoCuota = new Property(6, Float.class, "MontoCuota", false, "MONTO_CUOTA");
        public final static Property NombreCompleto = new Property(7, String.class, "NombreCompleto", false, "NOMBRE_COMPLETO");
        public final static Property OrdenCobro = new Property(8, String.class, "OrdenCobro", false, "ORDEN_COBRO");
        public final static Property Pais = new Property(9, String.class, "Pais", false, "PAIS");
        public final static Property RutaAsignada = new Property(10, String.class, "RutaAsignada", false, "RUTA_ASIGNADA");
        public final static Property Saldo = new Property(11, Float.class, "Saldo", false, "SALDO");
        public final static Property SccCuentaID = new Property(12, String.class, "SccCuentaID", false, "SCC_CUENTA_ID");
        public final static Property StbRutaID = new Property(13, Integer.class, "StbRutaID", false, "STB_RUTA_ID");
        public final static Property OjbCobradorID = new Property(14, Integer.class, "ojbCobradorID", false, "OJB_COBRADOR_ID");
    };


    public CarteraDao(DaoConfig config) {
        super(config);
    }
    
    public CarteraDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CARTERA\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"CEDULA\" TEXT," + // 1: Cedula
                "\"CIUDAD\" TEXT," + // 2: Ciudad
                "\"CLIENTE_ID\" INTEGER," + // 3: ClienteID
                "\"DIRECCION\" TEXT," + // 4: Direccion
                "\"FECHA_ABONO\" TEXT," + // 5: FechaAbono
                "\"MONTO_CUOTA\" REAL," + // 6: MontoCuota
                "\"NOMBRE_COMPLETO\" TEXT," + // 7: NombreCompleto
                "\"ORDEN_COBRO\" TEXT," + // 8: OrdenCobro
                "\"PAIS\" TEXT," + // 9: Pais
                "\"RUTA_ASIGNADA\" TEXT," + // 10: RutaAsignada
                "\"SALDO\" REAL," + // 11: Saldo
                "\"SCC_CUENTA_ID\" TEXT," + // 12: SccCuentaID
                "\"STB_RUTA_ID\" INTEGER," + // 13: StbRutaID
                "\"OJB_COBRADOR_ID\" INTEGER);"); // 14: ojbCobradorID
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CARTERA\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Cartera entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String Cedula = entity.getCedula();
        if (Cedula != null) {
            stmt.bindString(2, Cedula);
        }
 
        String Ciudad = entity.getCiudad();
        if (Ciudad != null) {
            stmt.bindString(3, Ciudad);
        }
 
        Integer ClienteID = entity.getClienteID();
        if (ClienteID != null) {
            stmt.bindLong(4, ClienteID);
        }
 
        String Direccion = entity.getDireccion();
        if (Direccion != null) {
            stmt.bindString(5, Direccion);
        }
 
        String FechaAbono = entity.getFechaAbono();
        if (FechaAbono != null) {
            stmt.bindString(6, FechaAbono);
        }
 
        Float MontoCuota = entity.getMontoCuota();
        if (MontoCuota != null) {
            stmt.bindDouble(7, MontoCuota);
        }
 
        String NombreCompleto = entity.getNombreCompleto();
        if (NombreCompleto != null) {
            stmt.bindString(8, NombreCompleto);
        }
 
        String OrdenCobro = entity.getOrdenCobro();
        if (OrdenCobro != null) {
            stmt.bindString(9, OrdenCobro);
        }
 
        String Pais = entity.getPais();
        if (Pais != null) {
            stmt.bindString(10, Pais);
        }
 
        String RutaAsignada = entity.getRutaAsignada();
        if (RutaAsignada != null) {
            stmt.bindString(11, RutaAsignada);
        }
 
        Float Saldo = entity.getSaldo();
        if (Saldo != null) {
            stmt.bindDouble(12, Saldo);
        }
 
        String SccCuentaID = entity.getSccCuentaID();
        if (SccCuentaID != null) {
            stmt.bindString(13, SccCuentaID);
        }
 
        Integer StbRutaID = entity.getStbRutaID();
        if (StbRutaID != null) {
            stmt.bindLong(14, StbRutaID);
        }
 
        Integer ojbCobradorID = entity.getOjbCobradorID();
        if (ojbCobradorID != null) {
            stmt.bindLong(15, ojbCobradorID);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Cartera readEntity(Cursor cursor, int offset) {
        Cartera entity = new Cartera( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // Cedula
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // Ciudad
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // ClienteID
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // Direccion
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // FechaAbono
            cursor.isNull(offset + 6) ? null : cursor.getFloat(offset + 6), // MontoCuota
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // NombreCompleto
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // OrdenCobro
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // Pais
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // RutaAsignada
            cursor.isNull(offset + 11) ? null : cursor.getFloat(offset + 11), // Saldo
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // SccCuentaID
            cursor.isNull(offset + 13) ? null : cursor.getInt(offset + 13), // StbRutaID
            cursor.isNull(offset + 14) ? null : cursor.getInt(offset + 14) // ojbCobradorID
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Cartera entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCedula(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCiudad(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setClienteID(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setDireccion(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setFechaAbono(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setMontoCuota(cursor.isNull(offset + 6) ? null : cursor.getFloat(offset + 6));
        entity.setNombreCompleto(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setOrdenCobro(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setPais(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setRutaAsignada(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setSaldo(cursor.isNull(offset + 11) ? null : cursor.getFloat(offset + 11));
        entity.setSccCuentaID(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setStbRutaID(cursor.isNull(offset + 13) ? null : cursor.getInt(offset + 13));
        entity.setOjbCobradorID(cursor.isNull(offset + 14) ? null : cursor.getInt(offset + 14));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Cartera entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Cartera entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
